{"artifact":"/Users/leahr/Source/prose_converter/target/rls/debug/deps/unicode_xid-26480aa2c6309f2d.d","emit":"dep-info"}
{"artifact":"/Users/leahr/Source/prose_converter/target/rls/debug/deps/save-analysis/libunicode_xid-26480aa2c6309f2d.json","emit":"save-analysis"}
{"artifact":"/Users/leahr/Source/prose_converter/target/rls/debug/deps/libunicode_xid-26480aa2c6309f2d.rmeta","emit":"metadata"}
{"artifact":"/Users/leahr/Source/prose_converter/target/rls/debug/deps/libunicode_xid-26480aa2c6309f2d.rlib","emit":"link"}
{"artifact":"/Users/leahr/Source/prose_converter/target/rls/debug/deps/proc_macro2-235851d67bb244f6.d","emit":"dep-info"}
{"artifact":"/Users/leahr/Source/prose_converter/target/rls/debug/deps/save-analysis/libproc_macro2-235851d67bb244f6.json","emit":"save-analysis"}
{"artifact":"/Users/leahr/Source/prose_converter/target/rls/debug/deps/libproc_macro2-235851d67bb244f6.rmeta","emit":"metadata"}
{"artifact":"/Users/leahr/Source/prose_converter/target/rls/debug/deps/libproc_macro2-235851d67bb244f6.rlib","emit":"link"}
{"artifact":"/Users/leahr/Source/prose_converter/target/rls/debug/deps/quote-1e38c5f59e05d76f.d","emit":"dep-info"}
{"artifact":"/Users/leahr/Source/prose_converter/target/rls/debug/deps/save-analysis/libquote-1e38c5f59e05d76f.json","emit":"save-analysis"}
{"artifact":"/Users/leahr/Source/prose_converter/target/rls/debug/deps/libquote-1e38c5f59e05d76f.rmeta","emit":"metadata"}
{"artifact":"/Users/leahr/Source/prose_converter/target/rls/debug/deps/libquote-1e38c5f59e05d76f.rlib","emit":"link"}
error: macros that expand to items must be delimited with braces or followed by a semicolon
 --> <stdin>:1:20
  |
1 |   impl Dummy { named!(factor<&str,f64>,
  |  ____________________^
2 | | alt!(
3 | | ws!(le_f64) | ws!(delimited!(tag_s!("("), expr, tag_s!(")")))
4 | | )) { unimplemented!() } }
  | |__^
  |
help: change the delimiters to curly braces
  |
1 | impl Dummy { named!{factor<&str,f64>,
2 | alt!(
3 | ws!(le_f64) | ws!(delimited!(tag_s!("("), expr, tag_s!(")")))
4 | )} { unimplemented!() } }
  |
help: add a semicolon
  |
4 | )); { unimplemented!() } }
  |   ^

error: non-item in item list
 --> <stdin>:4:4
  |
1 | impl Dummy { named!(factor<&str,f64>,
  |            - item list starts here
...
4 | )) { unimplemented!() } }
  |    ^                    - item list ends here
  |    |
  |    non-item starts here

[2020-12-29T15:11:46Z ERROR rls::actions::hover] format_method: error: Failed, input: "impl Dummy { named!(factor<&str,f64>,\nalt!(\nws!(le_f64) | ws!(delimited!(tag_s!(\"(\"), expr, tag_s!(\")\")))\n)) { unimplemented!() } }"
error: macros that expand to items must be delimited with braces or followed by a semicolon
 --> <stdin>:1:20
  |
1 |   impl Dummy { named!(factor<&str,f64>,
  |  ____________________^
2 | | alt!(
3 | | ws!(le_f64) | ws!(delimited!(tag!("("), expr, tag!(")")))
4 | | )) { unimplemented!() } }
  | |__^
  |
help: change the delimiters to curly braces
  |
1 | impl Dummy { named!{factor<&str,f64>,
2 | alt!(
3 | ws!(le_f64) | ws!(delimited!(tag!("("), expr, tag!(")")))
4 | )} { unimplemented!() } }
  |
help: add a semicolon
  |
4 | )); { unimplemented!() } }
  |   ^

error: non-item in item list
 --> <stdin>:4:4
  |
1 | impl Dummy { named!(factor<&str,f64>,
  |            - item list starts here
...
4 | )) { unimplemented!() } }
  |    ^                    - item list ends here
  |    |
  |    non-item starts here

[2020-12-29T15:12:28Z ERROR rls::actions::hover] format_method: error: Failed, input: "impl Dummy { named!(factor<&str,f64>,\nalt!(\nws!(le_f64) | ws!(delimited!(tag!(\"(\"), expr, tag!(\")\")))\n)) { unimplemented!() } }"
error: this file contains an unclosed delimiter
   --> <stdin>:302:7
    |
25  | use nom::number::complete::{be_f64, le_f64;
    |                            - unclosed delimiter
...
302 | // };
    |       ^

error: expected identifier, found keyword `use`
  --> <stdin>:26:1
   |
26 | use nom::*;
   | ^^^ expected identifier, found keyword

error: expected one of `,`, `::`, `as`, or `}`, found `;`
  --> <stdin>:25:43
   |
25 | use nom::number::complete::{be_f64, le_f64;
   |                            -              ^ expected one of `,`, `::`, `as`, or `}`
   |                            |
   |                            unclosed delimiter
   |
help: `}` may belong here
   |
25 | use nom::number::complete::{be_f64, le_f64};
   |                                           ^
help: missing `,`
   |
25 | use nom::number::complete::{be_f64, le_f64,
   |                                           ^

error: expected one of `,`, `::`, `as`, or `}`, found `nom`
  --> <stdin>:26:5
   |
26 | use nom::*;
   |    -^^^ expected one of `,`, `::`, `as`, or `}`
   |    |
   |    help: missing `,`

error: expected identifier, found keyword `use`
  --> <stdin>:28:1
   |
28 | use std::fmt::Debug;
   | ^^^ expected identifier, found keyword

error: expected one of `,` or `}`, found `;`
  --> <stdin>:26:11
   |
26 | use nom::*;
   |           ^
   |           |
   |           expected one of `,` or `}`
   |           help: missing `,`

error: expected one of `,`, `::`, `as`, or `}`, found `std`
  --> <stdin>:28:5
   |
28 | use std::fmt::Debug;
   |    -^^^ expected one of `,`, `::`, `as`, or `}`
   |    |
   |    help: missing `,`

error: expected identifier, found keyword `const`
  --> <stdin>:30:1
   |
30 | const INPUT: &str = "!BP1:VAR| The quick brown fox jumps over the lazy dog.
   | ^^^^^ expected identifier, found keyword

error: expected one of `,`, `::`, `as`, or `}`, found `;`
  --> <stdin>:28:20
   |
28 | use std::fmt::Debug;
   |                    ^
   |                    |
   |                    expected one of `,`, `::`, `as`, or `}`
   |                    help: missing `,`

error: expected one of `,`, `::`, `as`, or `}`, found `INPUT`
  --> <stdin>:30:7
   |
30 | const INPUT: &str = "!BP1:VAR| The quick brown fox jumps over the lazy dog.
   |      -^^^^^ expected one of `,`, `::`, `as`, or `}`
   |      |
   |      help: missing `,`

error: expected one of `,`, `::`, `as`, or `}`, found `:`
  --> <stdin>:30:12
   |
30 | const INPUT: &str = "!BP1:VAR| The quick brown fox jumps over the lazy dog.
   |            ^ expected one of `,`, `::`, `as`, or `}`

error: mismatched closing delimiter: `)`
  --> <stdin>:25:43
   |
25 | use nom::number::complete::{be_f64, le_f64);
   |                            -              ^ mismatched closing delimiter
   |                            |
   |                            unclosed delimiter

error: mismatched closing delimiter: `)`
  --> <stdin>:25:43
   |
25 | use nom::number::complete::{be_f64, le_f64);
   |                            -              ^ mismatched closing delimiter
   |                            |
   |                            unclosed delimiter

error: mismatched closing delimiter: `)`
  --> <stdin>:25:43
   |
25 | use nom::number::complete::{be_f64, le_f64);
   |                            -              ^ mismatched closing delimiter
   |                            |
   |                            unclosed delimiter

error: mismatched closing delimiter: `)`
  --> <stdin>:25:43
   |
25 | use nom::number::complete::{be_f64, le_f64);
   |                            -              ^ mismatched closing delimiter
   |                            |
   |                            unclosed delimiter

error: mismatched closing delimiter: `)`
  --> <stdin>:25:43
   |
25 | use nom::number::complete::{be_f64, le_f64);
   |                            -              ^ mismatched closing delimiter
   |                            |
   |                            unclosed delimiter

error: mismatched closing delimiter: `)`
  --> <stdin>:25:43
   |
25 | use nom::number::complete::{be_f64, le_f64);
   |                            -              ^ mismatched closing delimiter
   |                            |
   |                            unclosed delimiter

error: mismatched closing delimiter: `}`
   --> <stdin>:160:1
    |
69  | fn main() -> Result<(), PlatformError> {
    |                                        - closing delimiter possibly meant for this
...
108 |     named!(factor<&str,f64>,
    |           - unclosed delimiter
...
160 | }
    | ^ mismatched closing delimiter

error: mismatched closing delimiter: `}`
   --> <stdin>:160:1
    |
69  | fn main() -> Result<(), PlatformError> {
    |                                        - closing delimiter possibly meant for this
...
108 |     named!(factor<&str,f64>,
    |           - unclosed delimiter
...
160 | }
    | ^ mismatched closing delimiter

error: mismatched closing delimiter: `}`
   --> <stdin>:160:1
    |
69  | fn main() -> Result<(), PlatformError> {
    |                                        - closing delimiter possibly meant for this
...
108 |     named!(factor<&str,f64>,
    |           - unclosed delimiter
...
160 | }
    | ^ mismatched closing delimiter

error: mismatched closing delimiter: `}`
   --> <stdin>:160:1
    |
69  | fn main() -> Result<(), PlatformError> {
    |                                        - closing delimiter possibly meant for this
...
108 |     named!(factor<&str,f64>,
    |           - unclosed delimiter
...
160 | }
    | ^ mismatched closing delimiter

error: mismatched closing delimiter: `}`
   --> <stdin>:160:1
    |
69  | fn main() -> Result<(), PlatformError> {
    |                                        - closing delimiter possibly meant for this
...
108 |     named!(factor<&str,f64>,
    |           - unclosed delimiter
...
160 | }
    | ^ mismatched closing delimiter

error: mismatched closing delimiter: `}`
   --> <stdin>:160:1
    |
69  | fn main() -> Result<(), PlatformError> {
    |                                        - closing delimiter possibly meant for this
...
108 |     named!(factor<&str,f64>,
    |           - unclosed delimiter
...
160 | }
    | ^ mismatched closing delimiter

error: unexpected closing delimiter: `}`
   --> <stdin>:159:1
    |
157 |         .delegate(TerminateOnCloseDelegate {})
    |                                            -- block is empty, you might have not meant to close it
158 |         .launch(app_state)
159 | }
    | ^ unexpected closing delimiter

error: mismatched closing delimiter: `)`
   --> <stdin>:110:6
    |
68  | fn main() -> Result<(), PlatformError> {
    |                                        - unclosed delimiter
...
110 |     ));
    |      ^ mismatched closing delimiter

error: unexpected closing delimiter: `}`
   --> <stdin>:160:1
    |
158 |         .delegate(TerminateOnCloseDelegate {})
    |                                            -- block is empty, you might have not meant to close it
159 |         .launch(app_state)
160 | }
    | ^ unexpected closing delimiter

error: mismatched closing delimiter: `)`
   --> <stdin>:111:6
    |
68  | fn main() -> Result<(), PlatformError> {
    |                                        - unclosed delimiter
...
111 |     ));
    |      ^ mismatched closing delimiter

error: unexpected closing delimiter: `}`
  --> <stdin>:10:24
   |
10 | ) { unimplemented!() } }
   |   -                  - ^ unexpected closing delimiter
   |   |                  |
   |   |                  ...matches this closing brace
   |   this opening brace...

error: mismatched closing delimiter: `)`
  --> <stdin>:10:1
   |
1  | impl Dummy { robust<&str, (&str, &str)>,
   |            - unclosed delimiter
...
10 | ) { unimplemented!() } }
   | ^ mismatched closing delimiter

[2020-12-29T20:46:16Z ERROR rls::actions::hover] format_method: error: Failed, input: "impl Dummy { robust<&str, (&str, &str)>,\ndo_parse!(\nmultispace0 >>\ntag!(\"!\") >>\nvar_name: alphanumeric1 >>\ntag!(\":VAR|\") >>\nvar_value: alphanumeric1 >>\n(var_name, var_value)\n)\n) { unimplemented!() } }"
error: unexpected closing delimiter: `}`
  --> <stdin>:10:24
   |
10 | ) { unimplemented!() } }
   |   -                  - ^ unexpected closing delimiter
   |   |                  |
   |   |                  ...matches this closing brace
   |   this opening brace...

error: mismatched closing delimiter: `)`
  --> <stdin>:10:1
   |
1  | impl Dummy { robust<&str, Vec<(&str, &str)>>,
   |            - unclosed delimiter
...
10 | ) { unimplemented!() } }
   | ^ mismatched closing delimiter

[2020-12-29T20:48:17Z ERROR rls::actions::hover] format_method: error: Failed, input: "impl Dummy { robust<&str, Vec<(&str, &str)>>,\ndo_parse!(\nmultispace0 >>\ntag!(\"!\") >>\nvar_name: alphanumeric1 >>\ntag!(\":VAR|\") >>\nvar_value: alphanumeric1 >>\n(var_name, var_value)\n)\n) { unimplemented!() } }"
error: unexpected closing delimiter: `}`
  --> <stdin>:10:24
   |
10 | ) { unimplemented!() } }
   |   -                  - ^ unexpected closing delimiter
   |   |                  |
   |   |                  ...matches this closing brace
   |   this opening brace...

error: mismatched closing delimiter: `)`
  --> <stdin>:10:1
   |
1  | impl Dummy { robust<&str, Vec<(&str, &str)>>,
   |            - unclosed delimiter
...
10 | ) { unimplemented!() } }
   | ^ mismatched closing delimiter

[2020-12-29T20:48:19Z ERROR rls::actions::hover] format_method: error: Failed, input: "impl Dummy { robust<&str, Vec<(&str, &str)>>,\ndo_parse!(\nmultispace0 >>\ntag!(\"!\") >>\nvar_name: alphanumeric1 >>\ntag!(\":VAR|\") >>\nvar_value: alphanumeric1 >>\n(var_name, var_value)\n)\n) { unimplemented!() } }"
error: expected one of `)`, `,`, `@`, or `|`, found `<`
   --> <stdin>:105:19
    |
105 |         Ok((_, Vec<(name, value)>)) => (name, value),
    |                   ^
    |                   |
    |                   expected one of `)`, `,`, `@`, or `|`
    |                   help: missing `,`

error: expected one of `)`, `,`, or `|`, found `>`
   --> <stdin>:105:33
    |
105 |         Ok((_, Vec<(name, value)>)) => (name, value),
    |                                 ^ expected one of `)`, `,`, or `|`

thread 'request-worker-1' panicked at 'explicit panic', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-ap-rustc_errors-691.0.0/src/diagnostic_builder.rs:436:13
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
thread 'request-worker-7' panicked at 'explicit panic', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-ap-rustc_errors-691.0.0/src/diagnostic_builder.rs:436:13
thread 'request-worker-1' panicked at 'explicit panic', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-ap-rustc_errors-691.0.0/src/diagnostic_builder.rs:436:13
thread 'request-worker-2' panicked at 'explicit panic', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-ap-rustc_errors-691.0.0/src/diagnostic_builder.rs:436:13
thread 'request-worker-7' panicked at 'explicit panic', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-ap-rustc_errors-691.0.0/src/diagnostic_builder.rs:436:13
error: expected `while`, `for`, `loop` or `{` after a label
   --> <stdin>:106:27
    |
106 |         Err(e) => 'static &vec![("NOT OK", "NOT OK")],
    |                           ^ expected `while`, `for`, `loop` or `{` after a label

error: labeled expression must be followed by `:`
   --> <stdin>:106:27
    |
106 |         Err(e) => 'static &vec![("NOT OK", "NOT OK")],
    |                   --------^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |                   |      |
    |                   |      help: add `:` after the label
    |                   the label
    |
    = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them

error: expected one of `.`, `;`, `?`, or an operator, found `}`
   --> <stdin>:106:54
    |
106 |         Err(e) => {let x = vec![("NOT OK", "NOT OK")]},
    |                                                      ^ expected one of `.`, `;`, `?`, or an operator

error: unexpected closing delimiter: `}`
  --> <stdin>:11:24
   |
11 | ) { unimplemented!() } }
   |   -                  - ^ unexpected closing delimiter
   |   |                  |
   |   |                  ...matches this closing brace
   |   this opening brace...

error: mismatched closing delimiter: `)`
  --> <stdin>:11:1
   |
1  | impl Dummy { robust<&str, Vec<(&str, &str)>>,
   |            - unclosed delimiter
...
11 | ) { unimplemented!() } }
   | ^ mismatched closing delimiter

[2020-12-29T21:31:00Z ERROR rls::actions::hover] format_method: error: Failed, input: "impl Dummy { robust<&str, Vec<(&str, &str)>>,\nmany0!(\ndo_parse!(\nmultispace0 >>\ntag!(\"!\") >>\nvar_name: alphanumeric1 >>\ntag!(\":VAR|\") >>\nvar_value: alphanumeric1 >>\n(var_name, var_value)\n))\n) { unimplemented!() } }"
thread 'request-worker-6' panicked at 'explicit panic', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-ap-rustc_errors-691.0.0/src/diagnostic_builder.rs:436:13
thread 'request-worker-2' panicked at 'explicit panic', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-ap-rustc_errors-691.0.0/src/diagnostic_builder.rs:436:13
thread 'request-worker-3' panicked at 'explicit panic', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-ap-rustc_errors-691.0.0/src/diagnostic_builder.rs:436:13
thread 'request-worker-6' panicked at 'explicit panic', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-ap-rustc_errors-691.0.0/src/diagnostic_builder.rs:436:13
thread 'request-worker-7' panicked at 'explicit panic', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-ap-rustc_errors-691.0.0/src/diagnostic_builder.rs:436:13
error: expected pattern, found `'a`
   --> <stdin>:108:17
    |
108 |             let 'a x = vec![("NOT OK", "NOT OK")];
    |                 ^^ expected pattern

error: unexpected closing delimiter: `}`
  --> <stdin>:11:24
   |
11 | ) { unimplemented!() } }
   |   -                  - ^ unexpected closing delimiter
   |   |                  |
   |   |                  ...matches this closing brace
   |   this opening brace...

error: mismatched closing delimiter: `)`
  --> <stdin>:11:1
   |
1  | impl Dummy { robust<&str, Vec<(&str, &str)>>,
   |            - unclosed delimiter
...
11 | ) { unimplemented!() } }
   | ^ mismatched closing delimiter

[2020-12-29T21:39:03Z ERROR rls::actions::hover] format_method: error: Failed, input: "impl Dummy { robust<&str, Vec<(&str, &str)>>,\nmany0!(\ndo_parse!(\nmultispace0 >>\ntag!(\"!\") >>\nvar_name: alphanumeric1 >>\ntag!(\":VAR|\") >>\nvar_value: alphanumeric1 >>\n(var_name, var_value)\n))\n) { unimplemented!() } }"
error: expected `;`, found keyword `let`
   --> <stdin>:104:50
    |
104 |     let mut error_res:&Vec<(&str, &str)> = vec![]
    |                                                  ^ help: add `;` here
105 | 
106 |     let res = robust(app_state.tester_state.ps_tester_in.as_str());
    |     --- unexpected token

thread 'request-worker-0' panicked at 'explicit panic', /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-ap-rustc_errors-691.0.0/src/diagnostic_builder.rs:436:13
error: unexpected closing delimiter: `}`
  --> <stdin>:11:24
   |
11 | ) { unimplemented!() } }
   |   -                  - ^ unexpected closing delimiter
   |   |                  |
   |   |                  ...matches this closing brace
   |   this opening brace...

error: mismatched closing delimiter: `)`
  --> <stdin>:11:1
   |
1  | impl Dummy { robust<&str, Vec<(&str, &str)>>,
   |            - unclosed delimiter
...
11 | ) { unimplemented!() } }
   | ^ mismatched closing delimiter

[2020-12-29T21:42:27Z ERROR rls::actions::hover] format_method: error: Failed, input: "impl Dummy { robust<&str, Vec<(&str, &str)>>,\nmany0!(\ndo_parse!(\nmultispace0 >>\ntag!(\"!\") >>\nvar_name: alphanumeric1 >>\ntag!(\":VAR|\") >>\nvar_value: alphanumeric1 >>\n(var_name, var_value)\n))\n) { unimplemented!() } }"
error: unexpected closing delimiter: `}`
  --> <stdin>:48:1
   |
33 | impl ops::Add<Self> for Operand {
   |                                 - this opening brace...
...
47 |     }
   |     - ...matches this closing brace
48 | }
   | ^ unexpected closing delimiter

error: mismatched closing delimiter: `)`
  --> <stdin>:37:19
   |
36 |     fn add(self, rhs: Self) -> Self {
   |                                     - unclosed delimiter
37 |         match self) {
   |                   ^ mismatched closing delimiter

error: expected `while`, `for`, `loop` or `{` after a label
   --> <stdin>:101:16
    |
101 |             'a vec![("NOT OK", "NOT OK")]
    |                ^^^ expected `while`, `for`, `loop` or `{` after a label

error: labeled expression must be followed by `:`
   --> <stdin>:101:16
    |
101 |             'a vec![("NOT OK", "NOT OK")]
    |             ---^^^^^^^^^^^^^^^^^^^^^^^^^^
    |             | |
    |             | help: add `:` after the label
    |             the label
    |
    = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them

error: expected one of `.`, `;`, `?`, `}`, or an operator, found `error_res`
   --> <stdin>:103:13
    |
101 |             'a vec![("NOT OK", "NOT OK")]
    |                                          - expected one of `.`, `;`, `?`, `}`, or an operator
102 | 
103 |             error_res = vec![("NOT OK", "NOT OK")];
    |             ^^^^^^^^^ unexpected token

error: expected `while`, `for`, `loop` or `{` after a label
   --> <stdin>:101:16
    |
101 |             'a vec![("NOT OK", "NOT OK")]
    |                ^^^ expected `while`, `for`, `loop` or `{` after a label

error: labeled expression must be followed by `:`
   --> <stdin>:101:16
    |
101 |             'a vec![("NOT OK", "NOT OK")]
    |             ---^^^^^^^^^^^^^^^^^^^^^^^^^^
    |             | |
    |             | help: add `:` after the label
    |             the label
    |
    = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them

error: borrow expressions cannot be annotated with lifetimes
   --> <stdin>:101:13
    |
101 |             &'a vec![("NOT OK", "NOT OK")]
    |             ^--^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |              |
    |              annotated with lifetime here
    |              help: remove the lifetime annotation

error: borrow expressions cannot be annotated with lifetimes
   --> <stdin>:101:13
    |
101 |             &'static vec![("NOT OK", "NOT OK")]
    |             ^-------^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |              |
    |              annotated with lifetime here
    |              help: remove the lifetime annotation

error: borrow expressions cannot be annotated with lifetimes
   --> <stdin>:101:13
    |
101 |             &'static vec![("NOT OK", "NOT OK")]
    |             ^-------^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |              |
    |              annotated with lifetime here
    |              help: remove the lifetime annotation

error: borrow expressions cannot be annotated with lifetimes
  --> <stdin>:98:44
   |
98 |     let ok_res: &Vec<(&str, &str)> = match &'static res {
   |                                            ^-------^^^^
   |                                             |
   |                                             annotated with lifetime here
   |                                             help: remove the lifetime annotation

error: borrow expressions cannot be annotated with lifetimes
  --> <stdin>:98:44
   |
98 |     let ok_res: &Vec<(&str, &str)> = match &'a res {
   |                                            ^--^^^^
   |                                             |
   |                                             annotated with lifetime here
   |                                             help: remove the lifetime annotation

error: unexpected closing delimiter: `}`
  --> <stdin>:11:24
   |
11 | ) { unimplemented!() } }
   |   -                  - ^ unexpected closing delimiter
   |   |                  |
   |   |                  ...matches this closing brace
   |   this opening brace...

error: mismatched closing delimiter: `)`
  --> <stdin>:11:1
   |
1  | impl Dummy { robust<&str, Vec<(&str, &str)>>,
   |            - unclosed delimiter
...
11 | ) { unimplemented!() } }
   | ^ mismatched closing delimiter

[2020-12-29T21:56:25Z ERROR rls::actions::hover] format_method: error: Failed, input: "impl Dummy { robust<&str, Vec<(&str, &str)>>,\nmany0!(\ndo_parse!(\nmultispace0 >>\ntag!(\"!\") >>\nvar_name: alphanumeric1 >>\ntag!(\":VAR|\") >>\nvar_value: alphanumeric1 >>\n(var_name, var_value)\n))\n) { unimplemented!() } }"
error: unexpected closing delimiter: `}`
  --> <stdin>:11:24
   |
11 | ) { unimplemented!() } }
   |   -                  - ^ unexpected closing delimiter
   |   |                  |
   |   |                  ...matches this closing brace
   |   this opening brace...

error: mismatched closing delimiter: `)`
  --> <stdin>:11:1
   |
1  | impl Dummy { robust<&str, Vec<(&str, &str)>>,
   |            - unclosed delimiter
...
11 | ) { unimplemented!() } }
   | ^ mismatched closing delimiter

[2020-12-29T21:56:28Z ERROR rls::actions::hover] format_method: error: Failed, input: "impl Dummy { robust<&str, Vec<(&str, &str)>>,\nmany0!(\ndo_parse!(\nmultispace0 >>\ntag!(\"!\") >>\nvar_name: alphanumeric1 >>\ntag!(\":VAR|\") >>\nvar_value: alphanumeric1 >>\n(var_name, var_value)\n))\n) { unimplemented!() } }"
error: unexpected closing delimiter: `}`
  --> <stdin>:11:24
   |
11 | ) { unimplemented!() } }
   |   -                  - ^ unexpected closing delimiter
   |   |                  |
   |   |                  ...matches this closing brace
   |   this opening brace...

error: mismatched closing delimiter: `)`
  --> <stdin>:11:1
   |
1  | impl Dummy { robust<&str, Vec<(&str, &str)>>,
   |            - unclosed delimiter
...
11 | ) { unimplemented!() } }
   | ^ mismatched closing delimiter

[2020-12-29T21:56:32Z ERROR rls::actions::hover] format_method: error: Failed, input: "impl Dummy { robust<&str, Vec<(&str, &str)>>,\nmany0!(\ndo_parse!(\nmultispace0 >>\ntag!(\"!\") >>\nvar_name: alphanumeric1 >>\ntag!(\":VAR|\") >>\nvar_value: alphanumeric1 >>\n(var_name, var_value)\n))\n) { unimplemented!() } }"
error[E0765]: unterminated double quote string
   --> <stdin>:230:67
    |
230 |                   Label::dynamic(|data: &TesterState, _| format!("{}", data.ps_tester_out))
    |  ___________________________________________________________________^
231 | |                     .with_line_break_mode(LineBreaking::WordWrap),
232 | |             ),
233 | |             1.0,
234 | |         )
235 | | }
    | |__^

error: unexpected closing delimiter: `}`
  --> <stdin>:11:24
   |
11 | ) { unimplemented!() } }
   |   -                  - ^ unexpected closing delimiter
   |   |                  |
   |   |                  ...matches this closing brace
   |   this opening brace...

error: mismatched closing delimiter: `)`
  --> <stdin>:11:1
   |
1  | impl Dummy { robust<&str, Vec<(&str, &str)>>,
   |            - unclosed delimiter
...
11 | ) { unimplemented!() } }
   | ^ mismatched closing delimiter

[2020-12-29T22:08:46Z ERROR rls::actions::hover] format_method: error: Failed, input: "impl Dummy { robust<&str, Vec<(&str, &str)>>,\nmany0!(\ndo_parse!(\nmultispace1 >>\ntag!(\"!\") >>\nvar_name: alphanumeric1 >>\ntag!(\":VAR|\") >>\nvar_value: alphanumeric1 >>\n(var_name, var_value)\n))\n) { unimplemented!() } }"
error: macros that expand to items must be delimited with braces or followed by a semicolon
  --> <stdin>:15:7
   |
15 |   named!(
   |  _______^
16 | |     robust<&str, Vec<Variable>>,
17 | |     many0!(
18 | |         do_parse!(
...  |
25 | |         ))
26 | | )
   | |_^
   |
help: change the delimiters to curly braces
   |
15 | named!{
16 |     robust<&str, Vec<Variable>>,
17 |     many0!(
18 |         do_parse!(
19 |             multispace1 >>
20 |             tag!("!") >>
 ...
help: add a semicolon
   |
26 | );
   |  ^

error: macros that expand to items must be delimited with braces or followed by a semicolon
  --> <stdin>:15:7
   |
15 |   named!(
   |  _______^
16 | |     robust<&str, Vec<Variable>>,
17 | |     many0!(
18 | |         do_parse!(
...  |
25 | |         ))
26 | | ),
   | |_^
   |
help: change the delimiters to curly braces
   |
15 | named!{
16 |     robust<&str, Vec<Variable>>,
17 |     many0!(
18 |         do_parse!(
19 |             multispace1 >>
20 |             tag!("!") >>
 ...
help: add a semicolon
   |
26 | );,
   |  ^

error: expected item, found `,`
  --> <stdin>:26:2
   |
26 | ),
   |  ^ expected item

error: this file contains an unclosed delimiter
  --> <stdin>:12:47
   |
1  | impl Dummy { pub fn pretty_print_var_vec()
   |            - unclosed delimiter
...
12 | //             Variable { unimplemented!() } }
   |                                               ^

error: expected one of `->`, `;`, `where`, or `{`, found `}`
  --> <stdin>:12:47
   |
1  | impl Dummy { pub fn pretty_print_var_vec()
   |                     --------------------  - expected one of `->`, `;`, `where`, or `{`
   |                     |
   |                     while parsing this `fn`
...
12 | //             Variable { unimplemented!() } }
   |                                               ^ unexpected token

[2020-12-29T22:27:53Z ERROR rls::actions::hover] format_method: error: Failed, input: "impl Dummy { pub fn pretty_print_var_vec()\n\n// named!(\n//     robust<&str, Vec<Variable>>,\n//     many0!(\n//         do_parse!(\n//             multispace1 >>\n//             tag!(\"!\") >>\n//             name: alphanumeric1 >>\n//             tag!(\":VAR|\") >>\n//             value: alphanumeric1 >>\n//             Variable { unimplemented!() } }"
error: expected type, found `{`
  --> <stdin>:25:39
   |
25 | pub fn pretty_print_var_vec(&self) -> {
   |                                       ^ expected type

error: expected type, found `{`
  --> <stdin>:25:39
   |
25 | pub fn pretty_print_var_vec(&self) -> {
   |                                       ^ expected type

error: unknown start of token: `
  --> <stdin>:86:23
   |
86 |             do_parse!(``
   |                       ^
   |
help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not
   |
86 |             do_parse!('`
   |                       ^

error: unknown start of token: `
  --> <stdin>:86:24
   |
86 |             do_parse!(``
   |                        ^
   |
help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not
   |
86 |             do_parse!(`'
   |                        ^

